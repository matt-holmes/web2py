(dp1
S'output'
p2
S"<class 'sqlite3.OperationalError'> no such table: blog_post"
p3
sS'layer'
p4
S'/home/matt/Dev/web2py/applications/blog/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n\trows = db(db.blog_post).select()\n\tfor row in rows:\n\t\trow.hasMoreToRead = False\n\t\tif len(str(row.body)) > 1500:\n\t\t\trow.body = str(row.body)[:2000] + \' .... \'\n\t\t\trow.hasMoreToRead = True\n\treturn locals()\n\n@auth.requires_membership(\'managers\')\ndef create():\n\tdb.blog_post.time_stamp.default = request.now\n\tdb.blog_post.time_stamp.writable = False\n\tdb.blog_post.time_stamp.readable = False\n\tform = SQLFORM(db.blog_post).process()\n\tif form.accepted: redirect(URL(\'index\'))\n\treturn locals()\n\ndef show_post():\n\tpost = db.blog_post(request.args(0,))\n\treturn locals()\n\n@auth.requires_membership(\'managers\')\ndef manage():\n\tgrid = SQLFORM.grid(db.blog_post)\n\treturn locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/matt/Dev/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/matt/Dev/web2py/applications/blog/controllers/default.py", line 76, in <module>\n  File "/home/matt/Dev/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/matt/Dev/web2py/applications/blog/controllers/default.py", line 12, in index\n    rows = db(db.blog_post).select()\n  File "/home/matt/Dev/web2py/gluon/packages/dal/pydal/objects.py", line 1986, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/matt/Dev/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 122, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/matt/Dev/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1258, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/matt/Dev/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1215, in _select_aux\n    self.execute(sql)\n  File "/home/matt/Dev/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1350, in execute\n    return self.log_execute(*a, **b)\n  File "/home/matt/Dev/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1344, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\nOperationalError: no such table: blog_post\n'
p11
s.